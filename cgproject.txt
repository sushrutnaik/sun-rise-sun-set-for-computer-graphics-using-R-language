/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#define SPEED 40.0
float i=0.0;    //movement of car

float j=0.0;    //movement of car2

float m=0.0;    //movement of clouds

float n=0.0;    //movement of plane along x-axis

float o=0.0;    //  and y-axis

float c=0.0;    //movement of comet	SS



int light=1;      //1 for green-light, 0 for red-light

int day=1;        //1 for day ,0 for night

int plane=0;      //1 for plane

int comet=0;      //1 for comet





void draw_pixel(GLint cx, GLint cy)

{



	glBegin(GL_POINTS);

		glVertex2i(cx,cy);

	glEnd();

}



void plotpixels(GLint h,GLint k, GLint x,GLint y)

{

	draw_pixel(x+h,y+k);

	draw_pixel(-x+h,y+k);

	draw_pixel(x+h,-y+k);

	draw_pixel(-x+h,-y+k);

	draw_pixel(y+h,x+k);

	draw_pixel(-y+h,x+k);

	draw_pixel(y+h,-x+k);

	draw_pixel(-y+h,-x+k);

}



void draw_circle(GLint h, GLint k, GLint r)

{

	GLint d=1-r, x=0, y=r;

	while(y>x)

	{

		plotpixels(h,k,x,y);

		if(d<0) d+=2*x+3;

		else

		{

			d+=2*(x-y)+5;

			--y;

		}

		++x;

	}

	plotpixels(h,k,x,y);

}





void draw_object()

{

    int l;

    if(day==1)

    {

//sky

glColor3f(0.0,0.9,0.9);

glBegin(GL_POLYGON);

glVertex2f(0,450);

glVertex2f(0,700);

glVertex2f(1100,700);

glVertex2f(1100,450);

glEnd();



//sun





	for(l=0;l<=35;l++)

    {

		glColor3f(0.890,0.607,0.109);

		draw_circle(100,625,l);

    }





//plane

if(plane==1)

{

	glColor3f(1.0,1.0,1.0);

	glBegin(GL_POLYGON);

	glVertex2f(925+n,625+o);

    glVertex2f(950+n,640+o);

	glVertex2f(1015+n,640+o);

	glVertex2f(1030+n,650+o);

	glVertex2f(1050+n,650+o);

	glVertex2f(1010+n,625+o);

    glEnd();



	glColor3f(0.8,0.8,0.8);

	glBegin(GL_LINE_LOOP);

	glVertex2f(925+n,625+o);

    glVertex2f(950+n,640+o);

	glVertex2f(1015+n,640+o);

	glVertex2f(1030+n,650+o);

	glVertex2f(1050+n,650+o);

	glVertex2f(1010+n,625+o);

    glEnd();



}



//cloud1

    for(l=0;l<=20;l++)

	{

		glColor3f(1.0,1.0,1.0);

		draw_circle(160+m,625,l);



	}



    for(l=0;l<=35;l++)

	{

		glColor3f(1.0,1.0,1.0);

		draw_circle(200+m,625,l);

		draw_circle(225+m,625,l);

	}



	for(l=0;l<=20;l++)

	{

		glColor3f(1.0,1.0,1.0);

		draw_circle(265+m,625,l);

	}



//cloud2





	for(l=0;l<=20;l++)

	{

            glColor3f(1.0,1.0,1.0);

		draw_circle(370+m,615,l);

    }



	for(l=0;l<=35;l++)

	{



		glColor3f(1.0,1.0,1.0);

		draw_circle(410+m,615,l);

		draw_circle(435+m,615,l);

		draw_circle(470+m,615,l);

	}



    for(l=0;l<=20;l++)

	{

		glColor3f(1.0,1.0,1.0);

		draw_circle(500+m,615,l);

    }



//grass

glColor3f(0.0,0.9,0.0);

glBegin(GL_POLYGON);

glVertex2f(0,160);

glVertex2f(0,450);

glVertex2f(1100,450);

glVertex2f(1100,160);

glEnd();

}



//road boundary

glColor3f(1.0,1.0,1.0);

glBegin(GL_POLYGON);

glVertex2f(0,150);

glVertex2f(0,160);

glVertex2f(1100,160);

glVertex2f(1100,150);

glEnd();



//road

glColor3f(0.2,0.2,0.2);

glBegin(GL_POLYGON);

glVertex2f(0,0);

glVertex2f(0,75);

glVertex2f(1100,75);

glVertex2f(1100,0);

glEnd();

//road2

glColor3f(0.2,0.2,0.2);

glBegin(GL_POLYGON);

glVertex2f(0,75);

glVertex2f(75,75);

glVertex2f(1100,75);

glVertex2f(1100,0);

glEnd();



//tree

glColor3f(0.9,0.2,0.0);

glBegin(GL_POLYGON);

glVertex2f(350,325);

glVertex2f(350,395);

glVertex2f(365,395);

glVertex2f(365,325);

glEnd();





	for(l=0;l<=30;l++)

	{

		glColor3f(0.0,0.5,0.0);

		draw_circle(340,400,l);

		draw_circle(380,400,l);

	}



	for(l=0;l<=25;l++)

	{

		glColor3f(0.0,0.5,0.0);

		draw_circle(350,440,l);

		draw_circle(370,440,l);

	}



	for(l=0;l<=20;l++)

	{

		glColor3f(0.0,0.5,0.0);

		draw_circle(360,465,l);

	}





//back compound

glColor3f(0.9,0.9,0.9);

glBegin(GL_POLYGON);

glVertex2f(550,375);

glVertex2f(600,425);

glVertex2f(825,425);

glVertex2f(850,375);

glEnd();



//house

glColor3f(0.733,0.392,0.105);

glBegin(GL_POLYGON);

glVertex2f(600,375);

glVertex2f(600,450);

glVertex2f(650,525);

glVertex2f(700,450);

glVertex2f(700,375);

glEnd();



//door

glColor3f(1.0,1.0,1.0);

glBegin(GL_POLYGON);

glVertex2f(640,375);

glVertex2f(640,410);

glVertex2f(660,410);

glVertex2f(660,375);

glEnd();



//roof

glColor3f(0.427,0.078,0.078);

glBegin(GL_POLYGON);

glVertex2f(700,450);

glVertex2f(650,525);

glVertex2f(750,525);

glVertex2f(780,450);

glEnd();



//

glColor3f(0.8,0.8,0.2);

glBegin(GL_POLYGON);

glVertex2f(700,375);

glVertex2f(700,450);

glVertex2f(780,450);

glVertex2f(780,375);

glEnd();



//window

glColor3f(0.5,0.0,0.0);

glBegin(GL_POLYGON);

glVertex2f(725,400);

glVertex2f(725,420);

glVertex2f(740,420);

glVertex2f(740,400);

glEnd();





//compound

glColor3f(0.7,0.7,0.7);

glBegin(GL_POLYGON);

glVertex2f(550,325);

glVertex2f(550,375);

glVertex2f(850,375);

glVertex2f(850,325);

glEnd();



//signal pole

	glColor3f(0.0,0.0,0.0);

	glBegin(GL_POLYGON);

		glVertex2f(1060,160);

		glVertex2f(1060,350);

		glVertex2f(1070,350);

		glVertex2f(1070,160);

	glEnd();



    glColor3f(0.7,0.7,0.7);

	glBegin(GL_POLYGON);

		glVertex2f(1040,350);

		glVertex2f(1040,500);

		glVertex2f(1090,500);

		glVertex2f(1090,350);

	glEnd();



	for(l=0;l<=20;l++)

	{

		glColor3f(1.0,0.0,0.0);

		draw_circle(1065,475,l);

		glColor3f(1.0,1.0,0.0);

		draw_circle(1065,425,l);

		glColor3f(0.0,1.0,0.0);

		draw_circle(1065,375,l);

	}



//car 1

glColor3f(0.9,0.2,0.0);

glBegin(GL_POLYGON);

glVertex2f(25+i,50);

glVertex2f(25+i,125);

glVertex2f(75+i,200);

glVertex2f(175+i,200);

glVertex2f(200+i,125);

glVertex2f(250+i,115);

glVertex2f(250+i,50);

glEnd();





//windows

glColor3f(0.1,0.1,0.1);

glBegin(GL_POLYGON);

glVertex2f(35+i,125);

glVertex2f(80+i,190);

glVertex2f(115+i,190);

glVertex2f(115+i,125);

glEnd();



glColor3f(0.1,0.1,0.1);

glBegin(GL_POLYGON);

glVertex2f(125+i,125);

glVertex2f(125+i,190);

glVertex2f(170+i,190);

glVertex2f(190+i,125);

glEnd();





for(l=0;l<20;l++)

   {

	glColor3f(0.0,0.0,0.0);

	draw_circle(75+i,50,l);

	draw_circle(175+i,50,l);

   }









//car2



glColor3f(0.0,0.0,1.0);

glBegin(GL_POLYGON);

glVertex2f(1070+j,50);

glVertex2f(1070+j,112);

glVertex2f(1000+j,125);

glVertex2f(972+j,210);

glVertex2f(810+j,210);

glVertex2f(780+j,125);

glVertex2f(735+j,125);

glVertex2f(710+j,50);

glEnd();





//windows

glColor3f(0.1,0.1,0.1);

glBegin(GL_POLYGON);

glVertex2f(1010+j,125);

glVertex2f(964+j,200);

glVertex2f(900+j,200);

glVertex2f(900+j,125);

glEnd();



glColor3f(0.1,0.1,0.1);

glBegin(GL_POLYGON);

glVertex2f(890+j,125);

glVertex2f(890+j,200);

glVertex2f(817+j,200);

glVertex2f(792+j,125);

glEnd();





for(l=0;l<30;l++)

   {

	glColor3f(0.0,0.0,0.0);

	draw_circle(950+j,50,l);

	draw_circle(800+j,50,l);

   }





glFlush();

}



void traffic_light()

{

	int l;

if(light==1)

{

    for(l=0;l<=20;l++)

    {



        //glColor3f(1.0,0.0,0.0);

		//draw_circle(1065,475,l);



		//glColor3f(1.0,1.0,0.0);

		//draw_circle(1065,425,l);



		glColor3f(0.0,0.7,0.0);

		draw_circle(1065,375,l);

		}

	  }



	else

	  {



        for(l=0;l<=20;l++)

		{

		glColor3f(1.0,0.0,0.0);

		draw_circle(1065,475,l);



	    //glColor3f(0.0,0.0,0.0);

	//draw_circle(1065,425,l);



		//glColor3f(1.0,0.0,0.0);

		//draw_circle(1065,475,l);

		}

	  }

}




void idle()

{

glClearColor(1.0,1.0,1.0,1.0);



if(light==0 && (i<=830)) //value of i when second vehicle is near the traffic-signal

 {



	 i+=SPEED/10;

     ++m;

	n-=2;

	 o+=0.2;

	c+=2;



 }



if(light==0 && (i>=1200 && i<=1620))// value of i when third vehicle is near the traffic signal

{

     i+=SPEED/10;

     ++m;

	 n-=2;

	 o+=0.2;

}





if(light==0)

{

	 i=i;

	 ++m;

	 n-=2;

	 o+=0.2;

}



else

{



     i+=SPEED/10;

     ++m;

     n-=2;

	 o+=0.2;

	 c+=2;

}



if(i>230 && j<1100)




	 i=0.0;
	 j-=SPEED/10;




if(m>1100)

	 m=0.0;

if( o>30)

{

	plane=0;

}



glutPostRedisplay();

}



void mouse(int btn,int state,int x,int y)

{

	if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)

        light=1;

    if(btn==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN)

        light=0;

}



void main_menu(int index)

{

	switch(index)

	{

	case 1:

	if(index==1)

	 {

        plane=1;

		 o=n=0.0;

	 }

	break;

	}

}



void myinit()

{

glClearColor(1.0,1.0,1.0,1.0);

glColor3f(0.0,0.0,1.0);

glPointSize(2.0);

glMatrixMode(GL_PROJECTION);

glLoadIdentity();

gluOrtho2D(0.0,1100.0,0.0,700.0);

}



void display()

{

glClear(GL_COLOR_BUFFER_BIT);

draw_object();

traffic_light();

glFlush();

}



int main(int argc,char** argv)

{

    int c_menu;







	glutInit(&argc,argv);

	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);

	glutInitWindowSize(1100.0,700.0);

	glutInitWindowPosition(0,0);

	glutCreateWindow("Advance Traffic Signal");

	glutDisplayFunc(display);

 glutIdleFunc(idle);

	glutMouseFunc(mouse);

	myinit();



    c_menu=glutCreateMenu(main_menu);

	glutAddMenuEntry("Aeroplane",1);

	glutAttachMenu(GLUT_RIGHT_BUTTON);



    glutMainLoop();

	return 0;

}

